import patternbase;
import locSetting;
import location as loc;

function getNextGeneratedUnit() {
    var unitptr, unitepd = dwepdread_epd(EPD(0x628438));
    if(unitptr == 0) unitepd = 0;
    return unitepd;
}


function makeUnitStackable(unitepd) {
    dwwrite_epd(
        unitepd + (0xDC / 4),
        dwread_epd(unitepd + (0xDC / 4)) | 0x200000
    );
}


// Bullet utilities

function getBulletOwner(unitepd) {
    return dwbreak(dwread_epd(unitepd + 0x4C / 4))[[2]];
}


function getBulletVelocity(unitepd) {
    // 0x040: point         current_speed;
    return
        dwread_epd(unitepd + (0x40 / 4) + 0),
        dwread_epd(unitepd + (0x40 / 4) + 1);
}

function getBulletPos(unitepd) {
    return dwbreak(dwread_epd(unitepd + (0x28 / 4)))[[0, 1]];
}


function getInfiniteVectorEnd(x, y, dx, dy) {
    const mapSize = 32 * 64;

    // Get time to arrive at the vertical edge of the map
    var timeX, timeY;
    if(dx >= 0x80000000) timeX = 2048 * x / -dx;
    else timeX = 2048 * (mapSize - x) / dx;
    if(dy >= 0x80000000) timeY = 2048 * y / -dy;
    else timeY = 2048 * (mapSize - y) / dy;

    // Get time for the missile to get to the edge
    var time;  // min(timeX, timeY)
    if(dx == 0) time = timeY;
    else if(dy == 0) time = timeX;
    else if(timeX <= timeY) time = timeX;
    else time = timeY;

    // Calculate final position
    var dstx, dsty;
    if(dx >= 0x80000000) dstx = x - (-dx * time / 2048);
    else dstx = x + (dx * time / 2048);
    if(dy >= 0x80000000) dsty = y - (-dy * time / 2048);
    else dsty = y + (dy * time / 2048);
    return dstx, dsty;  // 여러개 값 반환도 되요!
}


function orderBullet(unitepd, dx, dy) {
    if(unitepd) {
        // /*0x04D*/ u8            orderID;
        // /*0x04E*/ u8            orderState;
        SetMemoryEPD(unitepd + (0x4C / 4), SetTo, getBulletOwner(unitepd) + 0x00000600);

        // /*0x050*/ u16           orderUnitType;
        SetMemoryEPD(unitepd + (0x50 / 4), SetTo, 228);

        // /*0x058*/ Target    orderTarget;
        SetMemoryEPD(unitepd + (0x58 / 4), SetTo, dy * 0x10000 + dx);
        SetMemoryEPD(unitepd + (0x5C / 4), SetTo, 0);
    }
}



function killBullet(unitepd) {
    if(unitepd) {
        SetMemoryEPD(unitepd + (0x4C / 4), SetTo, getBulletOwner(unitepd));  // Set orderID to 0
    }
}


function orderAngle(unitepd, angle) {
    if(unitepd) {
        const srcx, srcy = dwbreak(dwread_epd(unitepd + (0x28 / 4)))[[0, 1]];
        const dx, dy = lengthdir(1024, angle);
        const dstx, dsty = getInfiniteVectorEnd(srcx, srcy, dx, dy);
        orderBullet(unitepd, dstx, dsty);
    }
}

/////

function createMissilePx(p: patternbase.Pattern, unit: TrgUnit, x, y) {
    loc.pxMoveLocationDot('pxmove', x, y);
    const epd = getNextGeneratedUnit();
    CreateUnit(1, unit, 'pxmove', p.forcePlayer);
    makeUnitStackable(epd);
}

function createVMissile(p: patternbase.Pattern, unit: TrgUnit, col) {
    const location = locSetting.vFromArray[col - 1];
    const epd = getNextGeneratedUnit();
    CreateUnit(1, unit, location, p.forcePlayer);
    makeUnitStackable(epd);
}

function createHMissile(p: patternbase.Pattern, unit: TrgUnit, row) {
    const location = locSetting.hFromArray[row - 1];
    const epd = getNextGeneratedUnit();
    CreateUnit(1, unit, location, p.forcePlayer);
    makeUnitStackable(epd);
}

////


